package org.archstudio.bna.things.shapes;

import org.archstudio.bna.IBNAView;
import org.archstudio.bna.ICoordinateMapper;
import org.archstudio.bna.IThingPeer;
import org.archstudio.bna.keys.IThingKey;
import org.archstudio.bna.keys.IThingRefKey;
import org.archstudio.bna.keys.ThingKey;
import org.archstudio.bna.keys.ThingRefKey;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

/*
 * DO NOT EDIT THIS FILE, it is automatically generated. ANY MODIFICATIONS WILL BE OVERWRITTEN.
 *
 * To modify, update the thingdefinition extension at
 * org.archstudio.bna/Package[name=org.archstudio.bna.things.shapes]/Thing[name=ReshapeHandle].
 */
 
@SuppressWarnings("all")
@NonNullByDefault
public abstract class ReshapeHandleThingBase extends org.archstudio.bna.things.AbstractThing
	implements org.archstudio.bna.IThing,
			org.archstudio.bna.facets.IHasMutableAnchorPoint,
			org.archstudio.bna.facets.IHasMutableColor,
			org.archstudio.bna.facets.IHasMutableReferencePoint,
			org.archstudio.bna.facets.IHasMutableSize {

	public ReshapeHandleThingBase(@Nullable Object id) {
		super(id);
	}

@Override
public IThingPeer<? extends ReshapeHandleThing> createPeer(IBNAView view, ICoordinateMapper cm){
	return new ReshapeHandleThingPeer<>((ReshapeHandleThing)this, view, cm);
}

	@Override
	protected void initProperties() {
		initProperty(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY, new java.awt.geom.Point2D.Double(0, 0));
		addShapeModifyingKey(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
		initProperty(org.archstudio.bna.facets.IHasColor.COLOR_KEY, new org.eclipse.swt.graphics.RGB(0, 0, 0));
		initProperty(org.archstudio.bna.facets.IHasSize.SIZE_KEY, new java.awt.Dimension(10, 10));
		super.initProperties();
	}

	public java.awt.geom.Point2D getAnchorPoint() {
		return get(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
	}

	/*package*/ java.awt.geom.Point2D getRawAnchorPoint() {
		return getRaw(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
	}

	public void setAnchorPoint(java.awt.geom.Point2D anchorPoint) {
		set(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY, anchorPoint);
	}

	/*package*/ java.awt.geom.Point2D setRawAnchorPoint(java.awt.geom.Point2D anchorPoint) {
		return setRaw(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY, anchorPoint);
	}

	public @Nullable org.eclipse.swt.graphics.RGB getColor() {
		return get(org.archstudio.bna.facets.IHasColor.COLOR_KEY);
	}

	/*package*/ @Nullable org.eclipse.swt.graphics.RGB getRawColor() {
		return getRaw(org.archstudio.bna.facets.IHasColor.COLOR_KEY);
	}

	public void setColor(@Nullable org.eclipse.swt.graphics.RGB color) {
		set(org.archstudio.bna.facets.IHasColor.COLOR_KEY, color);
	}

	/*package*/ @Nullable org.eclipse.swt.graphics.RGB setRawColor(@Nullable org.eclipse.swt.graphics.RGB color) {
		return setRaw(org.archstudio.bna.facets.IHasColor.COLOR_KEY, color);
	}

	public java.awt.Dimension getSize() {
		return get(org.archstudio.bna.facets.IHasSize.SIZE_KEY);
	}

	/*package*/ java.awt.Dimension getRawSize() {
		return getRaw(org.archstudio.bna.facets.IHasSize.SIZE_KEY);
	}

	public void setSize(java.awt.Dimension size) {
		set(org.archstudio.bna.facets.IHasSize.SIZE_KEY, size);
	}

	/*package*/ java.awt.Dimension setRawSize(java.awt.Dimension size) {
		return setRaw(org.archstudio.bna.facets.IHasSize.SIZE_KEY, size);
	}

}
