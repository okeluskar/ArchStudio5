package org.archstudio.myxgen.jet.codegen;

import org.archstudio.myxgen.MyxGenBrick;
import org.archstudio.myxgen.eclipse.extension.MyxGenWorkspaceExtensions;
import org.archstudio.myxgen.jet.codegen.MyxCompUtils;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class MyxCompStubBuilder extends MyxCompUtils {
  public static String generate(final MyxGenBrick b) {
    MyxGenBrick _xtrycatchfinallyexpression = null;
    try {
      String _parentBrickId = b.getParentBrickId();
      _xtrycatchfinallyexpression = MyxGenWorkspaceExtensions.getActiveMyxGenBrick(_parentBrickId);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        _xtrycatchfinallyexpression = null;
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    final MyxGenBrick pb = _xtrycatchfinallyexpression;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package �toPackageName(b.stubClassName)�;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("�IF pb == null�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import org.archstudio.myx.fw.MyxRegistry;");
    _builder.newLine();
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("�IF b.interfaces.size > 0�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import org.archstudio.myx.fw.MyxUtils;");
    _builder.newLine();
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("import org.archstudio.myx.fw.IMyxName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* DO NOT EDIT THIS CLASS, it is automatically generated.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ANY MODIFICATIONS WILL BE OVERWRITTEN.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* To modify, update the \"�b.name�\" MyxGen ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* extension in the �b.contributor.name� plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Abstract Myx brick: �b.name�");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* �IF b.description != null�<p>�b.description��ENDIF�");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public abstract class �toClassName(b.stubClassName)�");
    _builder.newLine();
    _builder.append("�IF pb == null�");
    _builder.newLine();
    _builder.append("extends org.archstudio.myx.fw.AbstractMyxSimpleBrick");
    _builder.newLine();
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("extends �pb.className�");
    _builder.newLine();
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("implements org.archstudio.myx.fw.IMyxDynamicBrick");
    _builder.newLine();
    _builder.append("�FOR i : b.interfaces.filter[i|i.serviceObjectDelegate == EServiceObjectDelegate::brick] BEFORE \', \' SEPARATOR \', \'��i.className��ENDFOR�");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF pb != null�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�constructorsFor(b, pb.contributor.name, pb.className)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* The registry of objects for this brick.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected final MyxRegistry myxRegistry = MyxRegistry.getSharedInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Register this brick instance with the registry.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void begin(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.begin();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("myxRegistry.register(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Unregister this brick instance with the registry.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void end(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("myxRegistry.unregister(this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.end();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Myx name for the <code>�i.name�</code> interface.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* �IF i.description != null�<p>�i.description��ENDIF�");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final IMyxName �toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)� = MyxUtils.createName(\"�i.id�\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF i.serviceObjectDelegate.needsVariable�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* Service object�IF !i.single�s�ENDIF� for the �i.name� interface.");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�IF i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("protected �i.className� �i.name� = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("protected final java.util.Collection<�i.className�> �i.name� = new java.util.concurrent.CopyOnWriteArrayList<�i.className�>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF i.serviceObjectDelegate.needsProxy�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* Service object proxy for the �i.name� interface.");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* Calls to this proxy object are automatically delegated to �IF i.serviceObjectDelegate == EServiceObjectDelegate::myxRegistry�all service objects in the MyxRegistry of type �i.className�.�ELSE�all connections on the interface�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("protected final �i.className� �i.name�Proxy =");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(�i.className�) java.lang.reflect.Proxy.newProxyInstance(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("�i.className�.class.getClassLoader(), ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("new Class[] { �i.className�.class },");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("new java.lang.reflect.InvocationHandler() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args) throws Throwable {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("�IF i.serviceObjectDelegate == EServiceObjectDelegate::myxRegistry�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("for (�i.className� o : myxRegistry.getObjects(�toClassName(b.stubClassName)�.this, �i.className�.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("�ELSEIF !i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("for (�i.className� o : �i.name�) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("�i.className� o = �i.name�;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if (o == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("throw new NullPointerException(\"�i.name�\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("method.invoke(o, args);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF i.generateGetter�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* Returns the service object(s) for the �i.name� interface.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF i.serviceObjectDelegate.needsProxy�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public �i.className� get�i.name.toFirstUpper�() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public �IF i.single��i.className��ELSE�java.util.Collection<�i.className�>�ENDIF� get�i.name.toFirstUpper�() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�IF i.serviceObjectDelegate == EServiceObjectDelegate::brick�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF !i.serviceObjectDelegate.needsProxy && i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (�i.name� == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new NullPointerException(\"Uninitialized service object: �i.name�\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return �i.name��IF i.serviceObjectDelegate.needsProxy�Proxy�ENDIF�;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Returns service object(s) for IN interfaces.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::IN]�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object getServiceObject(IMyxName interfaceName) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::IN]�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(interfaceName.equals(�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�IF i.serviceObjectDelegate == EServiceObjectDelegate::brick�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF !i.serviceObjectDelegate.needsProxy && i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (�i.name� == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new NullPointerException(\"Uninitialized service object: �i.name�\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return �i.name��IF i.serviceObjectDelegate.needsProxy�Proxy�ENDIF�;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF b.parentBrickId == null�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new IllegalArgumentException(\"Unhandled interface: \"+interfaceName.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.getServiceObject(interfaceName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Update service objects based on connected OUT interfaces.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::OUT]�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void interfaceConnected(IMyxName interfaceName, Object serviceObject) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (serviceObject == null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new NullPointerException(interfaceName.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::OUT]�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(interfaceName.equals(�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (�i.name� != null)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new IllegalStateException(\"Only a single connection is supported on interface: �i.name�\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("�i.name� = (�i.className�) serviceObject;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("�i.name�.add((�i.className�) serviceObject);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF b.parentBrickId == null�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new IllegalArgumentException(\"Unhandled interface: \"+interfaceName.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.interfaceConnected(interfaceName, serviceObject);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Update service objects based on disconnecting OUT interfaces.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::OUT]�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* @see #�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void interfaceDisconnecting(IMyxName interfaceName, Object serviceObject) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (serviceObject == null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new NullPointerException(interfaceName.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : b.interfaces.filter[i|i.direction == EMyxInterfaceDirection::OUT]�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(interfaceName.equals(�toConstantName(i.direction.name.toLowerCase + i.name.toFirstUpper)�)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF i.single�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (�i.name� == null)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new IllegalStateException(\"A connection was never made on interface: �i.name�\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("�i.name� = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("�i.name�.remove(serviceObject);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF b.parentBrickId == null�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new IllegalArgumentException(\"Unhandled interface: \"+interfaceName.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.interfaceDisconnecting(interfaceName, serviceObject);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Performs no operation upon the completion of an interface disconnecting.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void interfaceDisconnected(IMyxName interfaceName, Object serviceObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF b.parentBrickId != null�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.interfaceDisconnected(interfaceName, serviceObject);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
